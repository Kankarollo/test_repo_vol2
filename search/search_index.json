{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IoTAzurePi 2@KSDE'2020 Rozproszony system monitoringu zrealizowany w oparciu o chmur\u0119 i internet rzeczy Celem projektu jest opracowanie rozproszonego systemu monitorowania, zrealizowanego korzystaj\u0105c z chmury (AWS, Azure), oraz koncepcji internetu rzeczy. W ramach projektu nale\u017cy przygotowa\u0107 urz\u0105dzenia pomiarowe / monitoruj\u0105ce na bazie komputer\u00f3w Raspberry Pi, kt\u00f3re umo\u017cliwi\u0105 zbieranie oraz przesy\u0142anie danych do platformy administracyjnej / nadzoruj\u0105cej zrealizowanej na bazie dost\u0119pnych rozwi\u0105za\u0144 chmurowych (IoT Core, IoT Hub). System musi umo\u017cliwia\u0107 zar\u00f3wna odbieranie wiadomo\u015bci z urz\u0105dze\u0144 pomiarowych i przetwarzanie ich na platformie chmurowej, jak i wysy\u0142anie wiadomo\u015bci (na przyk\u0142ad danych konfiguracyjnych) z panelu administracyjnego w chmurze do urz\u0105dze\u0144 pomiarowych. Dodatkowo panel administracyjny powinien umo\u017cliwia\u0107 przeprowadzenia analiz na danych pomiarowych. Idea na zastosowanie Inspiracja. IoT ogr\u00f3d. Poprzez aplikacj\u0119 Azure WebApp u\u017cytkownik m\u00f3g\u0142by zarz\u0105dza\u0107 swoimi ro\u015blinami oraz obserwowa\u0107 dane wysy\u0142ane z czujnik\u00f3w (temperatura, wilgotno\u015b\u0107 pomieszczenia, wilgotno\u015b\u0107 gleby, nat\u0119\u017cenie \u015bwiat\u0142a) za pomoc\u0105 prostego GUI. Znajdowa\u0142yby si\u0119 tam odpowiednie funkcj\u0119: - Wizualizacja danych otrzymanych z czujnik\u00f3w - Mo\u017cliwo\u015b\u0107 podlania ro\u015bliny za pomoc\u0105 wys\u0142ania wiadomo\u015bci steruj\u0105cej do raspberryPi, kt\u00f3ra uruchomi pompk\u0119 z wod\u0105 - Przechowywanie danych w bazie danych CosmoDB","title":"Home"},{"location":"#iotazurepi","text":"","title":"IoTAzurePi"},{"location":"#2ksde2020-rozproszony-system-monitoringu-zrealizowany-w-oparciu-o-chmure-i-internet-rzeczy","text":"Celem projektu jest opracowanie rozproszonego systemu monitorowania, zrealizowanego korzystaj\u0105c z chmury (AWS, Azure), oraz koncepcji internetu rzeczy. W ramach projektu nale\u017cy przygotowa\u0107 urz\u0105dzenia pomiarowe / monitoruj\u0105ce na bazie komputer\u00f3w Raspberry Pi, kt\u00f3re umo\u017cliwi\u0105 zbieranie oraz przesy\u0142anie danych do platformy administracyjnej / nadzoruj\u0105cej zrealizowanej na bazie dost\u0119pnych rozwi\u0105za\u0144 chmurowych (IoT Core, IoT Hub). System musi umo\u017cliwia\u0107 zar\u00f3wna odbieranie wiadomo\u015bci z urz\u0105dze\u0144 pomiarowych i przetwarzanie ich na platformie chmurowej, jak i wysy\u0142anie wiadomo\u015bci (na przyk\u0142ad danych konfiguracyjnych) z panelu administracyjnego w chmurze do urz\u0105dze\u0144 pomiarowych. Dodatkowo panel administracyjny powinien umo\u017cliwia\u0107 przeprowadzenia analiz na danych pomiarowych.","title":"2@KSDE'2020 Rozproszony system monitoringu zrealizowany w oparciu o chmur\u0119 i internet rzeczy"},{"location":"#idea-na-zastosowanie","text":"Inspiracja. IoT ogr\u00f3d. Poprzez aplikacj\u0119 Azure WebApp u\u017cytkownik m\u00f3g\u0142by zarz\u0105dza\u0107 swoimi ro\u015blinami oraz obserwowa\u0107 dane wysy\u0142ane z czujnik\u00f3w (temperatura, wilgotno\u015b\u0107 pomieszczenia, wilgotno\u015b\u0107 gleby, nat\u0119\u017cenie \u015bwiat\u0142a) za pomoc\u0105 prostego GUI. Znajdowa\u0142yby si\u0119 tam odpowiednie funkcj\u0119: - Wizualizacja danych otrzymanych z czujnik\u00f3w - Mo\u017cliwo\u015b\u0107 podlania ro\u015bliny za pomoc\u0105 wys\u0142ania wiadomo\u015bci steruj\u0105cej do raspberryPi, kt\u00f3ra uruchomi pompk\u0119 z wod\u0105 - Przechowywanie danych w bazie danych CosmoDB","title":"Idea na zastosowanie"},{"location":"opis_czujnikow/","text":"Dokumentacja techniczna cz\u0119\u015bci sprz\u0119towej Do zrealizowania cz\u0119\u015bci sprz\u0119towej skorzystano z modu\u0142\u00f3w komunikacyjnych wbudowanych w platform\u0119 mikroprocesorow\u0105 Raspberry Pi. Rozpisane piny urz\u0105dzenia znajduj\u0105 si\u0119 na rysunku poni\u017cej: Czujnik temperatury i wilgotno\u015bci DHT11 Do pomiaru temperatury i wilgotno\u015bci u\u017cyto czujnik wilgotno\u015bci DHT11. Jest to czujnik cyfrowy z interfejsem jednoprzewodowym. Zakres jego pracy dla temperatury to od -20 \u00b0C do +60 \u00b0C, a wilgotno\u015bci od 5 % do 95 % RH. Czujnik ma rozdzielczo\u015b\u0107 8-bitow\u0105, przez co jego dok\u0142adno\u015b\u0107 to 1\u00b0C oraz \u00b11 % RH. Czujnik pod\u0142\u0105czony zosta\u0142 do napi\u0119cia 3.3 V urz\u0105dzenia Raspberry Pi (pin 1), uziemienie do pinu 9 oraz dane zosta\u0142y pod\u0142\u0105czone do GPIO 17 dost\u0119pnego na pinie 11. W celu poprawnej komunikacji jednoprzewodowej konieczne jest zastosowanie rezystora pomi\u0119dzy napi\u0119ciem a lini\u0105 danych. Rezystor powinien mie\u0107 warto\u015b\u0107 o 4.7k do 10k Ohm. Po\u0142\u0105czenie czujnika z RPi zosta\u0142o przedstawione na poni\u017cszym rysunku: Do po\u0142\u0105czenia si\u0119 z czujnikiem wykorzystano gotow\u0105 bibliotek\u0119 od Adafruit. W celu instalacji tej biblioteki trzeba wykona\u0107 nast\u0119puj\u0105ce kroki: Zainstalowa\u0107 potrzebne narz\u0119dzia: sudo apt-get update sudo apt-get install build-essential python-dev Nast\u0119pnie pobra\u0107 bibliotek\u0119 z repozytorium na githubie: git clone https://github.com/adafruit/Adafruit_Python_DHT.git cd Adafruit_Python_DHT Nast\u0119pnie zainstalowa\u0107 bibliotek\u0119 dla Pythona 2 i Pythona 3 za pomoc\u0105 komend: sudo python setup.py install sudo python3 setup.py install Do komunikacji z czujnikiem zosta\u0142 napisany skrypt w j\u0119zyku Python. Przyk\u0142adowy kod programu umo\u017cliwiaj\u0105cy komunikacj\u0119 z czujnikiem: import sys import Adafruit_DHT # 11 stand for DHT-11 and 17 stands for GPIO pin humidity, temperature = Adafruit_DHT.read_retry(11, 17) if humidity is not None and temperature is not None: print('Temp={0:0.1f}* Humidity={1:0.1f}%'.format(temperature, humidity)) else: print('Failed to get reading. Try again!') sys.exit(1) Czujnik nat\u0119\u017cenia \u015bwiat\u0142a Zastosowanym czujnikiem \u015bwiat\u0142a jest BH1750. Jest to czujnik przetwarzaj\u0105cy nat\u0119\u017cenie \u015bwiat\u0142a o d\u0142ugo\u015bci z zakresu od 320 nm do 1050 nm na mierzaln\u0105 (np. poprzez zastosowanie mikrokontrolera) proporcjonaln\u0105 cz\u0119stotliwo\u015b\u0107. Zakres dzia\u0142ania czujnika to 1-65535 lx (luks\u00f3w) z rozdzielczo\u015bci\u0105 1 lub 4 lx w zale\u017cno\u015bci od wybranego trybu pracy. Komunikuje si\u0119 poprzez interfejs I2C (TWI), czyli dwie linie: danych - SDA i zegarow\u0105 SCL. Czujnik pod\u0142\u0105czony zosta\u0142 do napi\u0119cia 3.3 V z urz\u0105dzenia Raspberry Pi, uziemienie do GND oraz dane zosta\u0142y pod\u0142\u0105czone do GPIO 2 (SDA) oraz do GPIO 3 (SCL) zosta\u0142 pod\u0142\u0105czony zegar interfejsu I2C. Do komunikacji z czujnikiem wykorzystano magistral\u0119 I2C. Po pod\u0142\u0105czeniu pinu ADD do uziemienie urz\u0105dzenie ma adres 0x23. Mo\u017cna ustawi\u0107 r\u00f3\u017cne tryby odczytu. Wykorzystany zosta\u0142 tryb 0x20, jest to tryb umo\u017cliwiaj\u0105cy odczyt z dok\u0142adno\u015bci\u0105 do 1 lx oraz pozwalaj\u0105cy na wy\u0142\u0105czenie urz\u0105dzenia po odczycie w celu oszcz\u0119dzenia energii. Przyk\u0142adowy kod w j\u0119zyku Python: def convert_GY30_to_Number(data): # Simple function to convert 2 bytes of data # into a decimal number. result=(data[1] + (256 * data[0])) / 1.2 return (result) def read_data_GY30(): bus = smbus.SMBus(1) # Rev 2 Pi uses 1 # 0x23 is an addres of device, 0x20 is measurement at 1lx resolution. # Time typically 120ms # Device is automatically set to Power Down after measurement. data = bus.read_i2c_block_data(0x23,0x20) return convert_GY30_to_Number(data) Czujnik wilgotno\u015bci gleby Zasilany jest napi\u0119ciem od 3,3 V do 5 V. Urz\u0105dzenie sk\u0142ada si\u0119 z trzech cz\u0119\u015bci: sondy pomiarowej, modu\u0142u detektora oraz przewod\u00f3w. Sondy nale\u017cy po\u0142\u0105czy\u0107 z modu\u0142em g\u0142\u00f3wnym przy pomocy przewod\u00f3w i umie\u015bci\u0107 w glebie, kt\u00f3rej wilgotno\u015b\u0107 b\u0119dzie mierzona. Czujnik posiada wyj\u015bcie cyfrowe D0 sygnalizuj\u0105ce przekroczenie ustawionej za pomoc\u0105 potencjometru warto\u015bci oraz analogowe A0 przy pomocy kt\u00f3rego uzyskuje si\u0119 dok\u0142adn\u0105 warto\u015b\u0107 wilgotno\u015bci. Za pomoc\u0105 potencjometru ustawiany jest pr\u00f3g, po kt\u00f3rego przekroczeniu wyj\u015bcie D0 przechodzi ze stanu wysokiego w stan niski. Czujnik posiada tak\u017ce wyj\u015bcie analogowe A0, kt\u00f3re nale\u017cy pod\u0142\u0105czy\u0107 do wyprowadzenia przetwornika A/C, a nast\u0119pnie mo\u017cliwe jest za pomoc\u0105 interfejsu I2C po\u0142\u0105czenie z urz\u0105dzeniem Raspberry Pi. Pompa do wody Do podlewania ro\u015bliny w doniczce zosta\u0142a wykorzystana pompka do wody dzia\u0142aj\u0105ca na bazie komutatorowego silnika pr\u0105du sta\u0142ego. Pompa zasilana jest napi\u0119ciem od 2.5 - 6 V. Pr\u0105d pobierany przez silnik wynosi 130-220 mA. Wydajno\u015b\u0107 przep\u0142ywu cieczy to 80-120 L/h. Maksymalny pr\u0105d, kt\u00f3ry mo\u017ce by\u0107 pobierany z zasilania 5V urz\u0105dzenia Raspberry Pi to 300 mA, wi\u0119c z urz\u0105dzenia bez problemu mo\u017cna zasili\u0107 pomp\u0119 do wody. Do wysterowania silnikiem zosta\u0142 u\u017cyty mostek H L293D.","title":"Czujniki"},{"location":"opis_czujnikow/#dokumentacja-techniczna-czesci-sprzetowej","text":"Do zrealizowania cz\u0119\u015bci sprz\u0119towej skorzystano z modu\u0142\u00f3w komunikacyjnych wbudowanych w platform\u0119 mikroprocesorow\u0105 Raspberry Pi. Rozpisane piny urz\u0105dzenia znajduj\u0105 si\u0119 na rysunku poni\u017cej:","title":"Dokumentacja techniczna cz\u0119\u015bci sprz\u0119towej"},{"location":"opis_czujnikow/#czujnik-temperatury-i-wilgotnosci-dht11","text":"Do pomiaru temperatury i wilgotno\u015bci u\u017cyto czujnik wilgotno\u015bci DHT11. Jest to czujnik cyfrowy z interfejsem jednoprzewodowym. Zakres jego pracy dla temperatury to od -20 \u00b0C do +60 \u00b0C, a wilgotno\u015bci od 5 % do 95 % RH. Czujnik ma rozdzielczo\u015b\u0107 8-bitow\u0105, przez co jego dok\u0142adno\u015b\u0107 to 1\u00b0C oraz \u00b11 % RH. Czujnik pod\u0142\u0105czony zosta\u0142 do napi\u0119cia 3.3 V urz\u0105dzenia Raspberry Pi (pin 1), uziemienie do pinu 9 oraz dane zosta\u0142y pod\u0142\u0105czone do GPIO 17 dost\u0119pnego na pinie 11. W celu poprawnej komunikacji jednoprzewodowej konieczne jest zastosowanie rezystora pomi\u0119dzy napi\u0119ciem a lini\u0105 danych. Rezystor powinien mie\u0107 warto\u015b\u0107 o 4.7k do 10k Ohm. Po\u0142\u0105czenie czujnika z RPi zosta\u0142o przedstawione na poni\u017cszym rysunku: Do po\u0142\u0105czenia si\u0119 z czujnikiem wykorzystano gotow\u0105 bibliotek\u0119 od Adafruit. W celu instalacji tej biblioteki trzeba wykona\u0107 nast\u0119puj\u0105ce kroki: Zainstalowa\u0107 potrzebne narz\u0119dzia: sudo apt-get update sudo apt-get install build-essential python-dev Nast\u0119pnie pobra\u0107 bibliotek\u0119 z repozytorium na githubie: git clone https://github.com/adafruit/Adafruit_Python_DHT.git cd Adafruit_Python_DHT Nast\u0119pnie zainstalowa\u0107 bibliotek\u0119 dla Pythona 2 i Pythona 3 za pomoc\u0105 komend: sudo python setup.py install sudo python3 setup.py install Do komunikacji z czujnikiem zosta\u0142 napisany skrypt w j\u0119zyku Python. Przyk\u0142adowy kod programu umo\u017cliwiaj\u0105cy komunikacj\u0119 z czujnikiem: import sys import Adafruit_DHT # 11 stand for DHT-11 and 17 stands for GPIO pin humidity, temperature = Adafruit_DHT.read_retry(11, 17) if humidity is not None and temperature is not None: print('Temp={0:0.1f}* Humidity={1:0.1f}%'.format(temperature, humidity)) else: print('Failed to get reading. Try again!') sys.exit(1)","title":"Czujnik temperatury i wilgotno\u015bci DHT11"},{"location":"opis_czujnikow/#czujnik-natezenia-swiata","text":"Zastosowanym czujnikiem \u015bwiat\u0142a jest BH1750. Jest to czujnik przetwarzaj\u0105cy nat\u0119\u017cenie \u015bwiat\u0142a o d\u0142ugo\u015bci z zakresu od 320 nm do 1050 nm na mierzaln\u0105 (np. poprzez zastosowanie mikrokontrolera) proporcjonaln\u0105 cz\u0119stotliwo\u015b\u0107. Zakres dzia\u0142ania czujnika to 1-65535 lx (luks\u00f3w) z rozdzielczo\u015bci\u0105 1 lub 4 lx w zale\u017cno\u015bci od wybranego trybu pracy. Komunikuje si\u0119 poprzez interfejs I2C (TWI), czyli dwie linie: danych - SDA i zegarow\u0105 SCL. Czujnik pod\u0142\u0105czony zosta\u0142 do napi\u0119cia 3.3 V z urz\u0105dzenia Raspberry Pi, uziemienie do GND oraz dane zosta\u0142y pod\u0142\u0105czone do GPIO 2 (SDA) oraz do GPIO 3 (SCL) zosta\u0142 pod\u0142\u0105czony zegar interfejsu I2C. Do komunikacji z czujnikiem wykorzystano magistral\u0119 I2C. Po pod\u0142\u0105czeniu pinu ADD do uziemienie urz\u0105dzenie ma adres 0x23. Mo\u017cna ustawi\u0107 r\u00f3\u017cne tryby odczytu. Wykorzystany zosta\u0142 tryb 0x20, jest to tryb umo\u017cliwiaj\u0105cy odczyt z dok\u0142adno\u015bci\u0105 do 1 lx oraz pozwalaj\u0105cy na wy\u0142\u0105czenie urz\u0105dzenia po odczycie w celu oszcz\u0119dzenia energii. Przyk\u0142adowy kod w j\u0119zyku Python: def convert_GY30_to_Number(data): # Simple function to convert 2 bytes of data # into a decimal number. result=(data[1] + (256 * data[0])) / 1.2 return (result) def read_data_GY30(): bus = smbus.SMBus(1) # Rev 2 Pi uses 1 # 0x23 is an addres of device, 0x20 is measurement at 1lx resolution. # Time typically 120ms # Device is automatically set to Power Down after measurement. data = bus.read_i2c_block_data(0x23,0x20) return convert_GY30_to_Number(data)","title":"Czujnik nat\u0119\u017cenia \u015bwiat\u0142a"},{"location":"opis_czujnikow/#czujnik-wilgotnosci-gleby","text":"Zasilany jest napi\u0119ciem od 3,3 V do 5 V. Urz\u0105dzenie sk\u0142ada si\u0119 z trzech cz\u0119\u015bci: sondy pomiarowej, modu\u0142u detektora oraz przewod\u00f3w. Sondy nale\u017cy po\u0142\u0105czy\u0107 z modu\u0142em g\u0142\u00f3wnym przy pomocy przewod\u00f3w i umie\u015bci\u0107 w glebie, kt\u00f3rej wilgotno\u015b\u0107 b\u0119dzie mierzona. Czujnik posiada wyj\u015bcie cyfrowe D0 sygnalizuj\u0105ce przekroczenie ustawionej za pomoc\u0105 potencjometru warto\u015bci oraz analogowe A0 przy pomocy kt\u00f3rego uzyskuje si\u0119 dok\u0142adn\u0105 warto\u015b\u0107 wilgotno\u015bci. Za pomoc\u0105 potencjometru ustawiany jest pr\u00f3g, po kt\u00f3rego przekroczeniu wyj\u015bcie D0 przechodzi ze stanu wysokiego w stan niski. Czujnik posiada tak\u017ce wyj\u015bcie analogowe A0, kt\u00f3re nale\u017cy pod\u0142\u0105czy\u0107 do wyprowadzenia przetwornika A/C, a nast\u0119pnie mo\u017cliwe jest za pomoc\u0105 interfejsu I2C po\u0142\u0105czenie z urz\u0105dzeniem Raspberry Pi.","title":"Czujnik wilgotno\u015bci gleby"},{"location":"opis_czujnikow/#pompa-do-wody","text":"Do podlewania ro\u015bliny w doniczce zosta\u0142a wykorzystana pompka do wody dzia\u0142aj\u0105ca na bazie komutatorowego silnika pr\u0105du sta\u0142ego. Pompa zasilana jest napi\u0119ciem od 2.5 - 6 V. Pr\u0105d pobierany przez silnik wynosi 130-220 mA. Wydajno\u015b\u0107 przep\u0142ywu cieczy to 80-120 L/h. Maksymalny pr\u0105d, kt\u00f3ry mo\u017ce by\u0107 pobierany z zasilania 5V urz\u0105dzenia Raspberry Pi to 300 mA, wi\u0119c z urz\u0105dzenia bez problemu mo\u017cna zasili\u0107 pomp\u0119 do wody. Do wysterowania silnikiem zosta\u0142 u\u017cyty mostek H L293D.","title":"Pompa do wody"}]}